generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())

  coursesCreated   Course[]           @relation("CreatedCourses")
  enrollments      Enrollment[]
  reviews          Review[]
  certificates     Certificate[]
  payments         Payment[]
  Blog             Blog[]
  PasswordReset    PasswordReset[]
  CommunityMessage CommunityMessage[]
}

model Course {
  id                String      @id @default(uuid())
  title             String
  description       String
  price             Float
  thumbnailUrl      String
  status            Status      @default(DRAFT)
  type              CourseType  @default(RECORDED) // ✅ Identifies live vs recorded
  whatsappGroupLink String?     // ✅ NEW FIELD - optional WhatsApp group link
  createdAt         DateTime    @default(now())

  createdBy   User   @relation("CreatedCourses", fields: [createdById], references: [id])
  createdById String

  sections     Section[]
  sessions     Session[]
  enrollments  Enrollment[]
  reviews      Review[]
  certificates Certificate[]
  payments     Payment[]
}

model Session {
  id          String      @id @default(uuid())
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  type        SessionType @default(RECORDED)
  meetLink    String?
  createdAt   DateTime    @default(now())
}

model Section {
  id        String   @id @default(uuid())
  title     String
  videoUrl  String
  createdAt DateTime @default(now())

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
}

model Enrollment {
  id         String   @id @default(uuid())
  enrolledAt DateTime @default(now())
  progress   Float    @default(0.0)
  completed  Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model Certificate {
  id       String   @id @default(uuid())
  issuedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
}

model Payment {
  id                String   @id @default(uuid())
  razorpayOrderId   String
  razorpayPaymentId String
  amount            Float
  status            String
  createdAt         DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
}

model Blog {
  id       String @id @default(uuid())
  title    String
  content  String
  imageUrl String

  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
}

model CommunityMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

// ✅ ENUMS
enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum Status {
  PUBLISHED
  DRAFT
}

enum CourseType {
  RECORDED
  LIVE
}

enum SessionType {
  RECORDED
  LIVE
}
